import DomainEvent from './DomainEvent';
import ValueObject from './ValueObject';

export type SerializedDomainEvent = string;

/**
 * Holds the serialized DomainEvent. They are meant to be persisted
 * into the EventStore.
 */
export default abstract class StoreEvent<
  StoreEventId = string
> extends ValueObject {
  /**
   * Each StoredEvent instance gets a unique sequence value usually autogenerated
   * by the database and set as its eventId.
   */
  public abstract readonly eventId: StoreEventId;

  /**
   * Copy of the same eventType in the DomainEvent metadata.
   */
  public readonly eventType: string | number;

  /**
   * Copy of the same eventVersion in the DomainEvent metadata.
   */
  public readonly eventVersion: string | number;

  /**
   * Its eventBody contains the serialization of the DomainEvent.
   * E.g. possible serialization to be used is JSON, or it could
   * just use another form.
   */
  public readonly eventBody: SerializedDomainEvent;

  /**
   * Copy of the same occurredOn in the DomainEvent metadata.
   */
  public readonly occurredOn: Date;

  constructor(aDomainEvent: DomainEvent) {
    super();
    this.eventType = aDomainEvent.metadata.eventType;
    this.eventVersion = aDomainEvent.metadata.eventVersion;
    this.eventBody = this.serialize(aDomainEvent);
    this.occurredOn = aDomainEvent.metadata.occurredOn;
  }

  /**
   * Serializes the DomainEvent instance. Used in the constructor.
   * @param aDomainEvent - Aggregate or Entity DomainEvent.
   */
  public abstract serialize<Event extends DomainEvent>(
    aDomainEvent: Event
  ): SerializedDomainEvent;

  /**
   * Deserializes the `eventBody` into its repective DomainEvent instance.
   */
  public abstract deserialize<Event extends DomainEvent>(): Event;
}
